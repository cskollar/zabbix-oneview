zabbix_export:
  version: '5.2'
  date: '2022-02-06T14:24:02Z'
  groups:
    -
      name: 'Discovered hosts'
    -
      name: Templates/Applications
    -
      name: 'Templates/Server hardware'
  templates:
    -
      template: 'HPE OneView'
      name: 'HPE OneView'
      description: |
        Version: 1.0
        Homepage: https://github.com/cskollar/zabbix-oneview
        Author: Csaba Kollar
        
        Zabbix template for HPE OneView (especially for Synergy frames). It uses native Zabbix features and functions and doesn't require any external scripts or plugins. Queries are implemented through the official OneView REST API.
        
        Usage:
        
        1. Import the template file (it contains 3 templates)
        
        2. Set the proper host group in the main template ("HPE OneView" -> enclosure AND server discovery -> host prototype -> groups)
        
        3. Create a host for the OneView appliance (eg.: composer1.local.tld)
        Link the main template ("HPE OneView") to the host
        
        4. Assign user macros to the host
        
        User macros:
        
        {$ONEVIEW_HOST} - host or IP address of the composer (OneView appliance)
        {$ONEVIEW_USER} - OneView username
        {$ONEVIEW_PASS} - OneView password
      templates:
        -
          name: 'ICMP Ping'
      groups:
        -
          name: Templates/Applications
      items:
        -
          name: 'OneView: Get Alerts'
          type: SCRIPT
          key: oneview.get.alerts
          trends: '0'
          value_type: TEXT
          params: |
            try {
                var result = [],
                req = new CurlHttpRequest(),resp;
                req.AddHeader('content-type: application/json');
                req.AddHeader('x-api-version: 3000');
            
                //GET Token
                resp = req.Post('https://{$ONEVIEW_HOST}/rest/login-sessions',value);
                if (req.Status() != 200) {
                    throw 'Response code: '+req.Status();
                }
                resp = JSON.parse(resp);
                token = resp.sessionID;
            
                //GET Alerts
                req.AddHeader('auth: '+token);
                resp = req.Get('https://{$ONEVIEW_HOST}/rest/alerts?query=%22alertState%20EQ%20%27Active%27%20OR%20alertState%20EQ%20%27Locked%27%22');
                if (req.Status() != 200) {
                    throw 'Response code: '+req.Status();
                }
                resp = JSON.parse(resp);
                result = resp.members.map(function(m) {
                    return {
                        id: m.uri.replace("\/rest\/alerts\/",""),
                        description: m.description,
                        severity: m.severity
                     };
                });
            
                //DELETE token
                resp = req.Delete('https://{$ONEVIEW_HOST}/rest/login-sessions');
                if (req.Status() != 204) {
                    throw 'Response code: '+req.Status();
                }
             
            } catch (error) {
                Zabbix.Log(4, 'OneView api error: '+error);
                result = {
                    failed: error
                };
            }
            
            //RESULT
            return JSON.stringify(result);
          parameters:
            -
              name: password
              value: '{$ONEVIEW_PASS}'
            -
              name: userName
              value: '{$ONEVIEW_USER}'
        -
          name: 'OneView: Get Enclosures'
          type: SCRIPT
          key: oneview.get.enclosures
          delay: 5m
          history: '0'
          trends: '0'
          value_type: TEXT
          params: |
            try {
                var result = [],
                req = new CurlHttpRequest(),resp;
                req.AddHeader('content-type: application/json');
                req.AddHeader('x-api-version: 3000');
            
                //GET Token
                resp = req.Post('https://{$ONEVIEW_HOST}/rest/login-sessions',value);
                if (req.Status() != 200) {
                    throw 'Response code: '+req.Status();
                }
                resp = JSON.parse(resp);
                token = resp.sessionID;
            
                //GET Enclosures
                req.AddHeader('auth: '+token);
                resp = req.Get('https://{$ONEVIEW_HOST}/rest/enclosures');
                if (req.Status() != 200) {
                    throw 'Response code: '+req.Status();
                }
                resp = JSON.parse(resp);
                result = resp.members.map(function(m) {
                    return {
                        uri: m.uri,
                        uuid: m.uuid,
                        name: m.name
                     };
                });
            
                //DELETE token
                resp = req.Delete('https://{$ONEVIEW_HOST}/rest/login-sessions');
                if (req.Status() != 204) {
                    throw 'Response code: '+req.Status();
                }
             
            } catch (error) {
                Zabbix.Log(4, 'OneView api error: '+error);
                result = {
                    failed: error
                };
            }
            
            //RESULT
            return JSON.stringify(result);
          parameters:
            -
              name: password
              value: '{$ONEVIEW_PASS}'
            -
              name: userName
              value: '{$ONEVIEW_USER}'
        -
          name: 'OneView: Get Servers'
          type: SCRIPT
          key: oneview.get.servers
          delay: 5m
          history: '0'
          trends: '0'
          value_type: TEXT
          params: |
            try {
                var result = [],
                req = new CurlHttpRequest(),
                resp;
                req.AddHeader('content-type: application/json');
                req.AddHeader('x-api-version: 3000');
            
                //GET Token
                resp = req.Post('https://{$ONEVIEW_HOST}/rest/login-sessions',value);
                if (req.Status() != 200) {
                    throw 'Response code: '+req.Status();
                }
                resp = JSON.parse(resp);
                token = resp.sessionID;
            
                //GET Servers
                req.AddHeader('auth: '+token);
                resp = req.Get('https://{$ONEVIEW_HOST}/rest/server-hardware');
                if (req.Status() != 200) {
                    throw 'Response code: '+req.Status();
                }
                resp = JSON.parse(resp);
                result = resp.members.map(function(m) {
                    return {
                        uri: m.uri,
                        name: m.name.replace(", "," - "),
                        model: m.model
                     };
                });
            
                //DELETE token
                resp = req.Delete('https://{$ONEVIEW_HOST}/rest/login-sessions');
                if (req.Status() != 204) {
                    throw 'Response code: '+req.Status();
                }
             
            } catch (error) {
                Zabbix.Log(4, 'OneView api error: '+error);
                result = {
                    failed: error
                };
            }
            
            //RESULT
            return JSON.stringify(result);
          parameters:
            -
              name: password
              value: '{$ONEVIEW_PASS}'
            -
              name: userName
              value: '{$ONEVIEW_USER}'
      discovery_rules:
        -
          name: 'Alert discovery'
          type: DEPENDENT
          key: oneview.alerts.discovery
          delay: '0'
          lifetime: '0'
          item_prototypes:
            -
              name: '({#ALERT_ID}) {#ALERT_DESC}'
              type: DEPENDENT
              key: 'oneview.alert.severity[{#ALERT_ID}]'
              delay: '0'
              trends: '0'
              value_type: CHAR
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.["id"]=="{#ALERT_ID}")].["severity"].first()'
              master_item:
                key: oneview.get.alerts
              trigger_prototypes:
                -
                  expression: '{last()}<>"OK"'
                  name: 'OneView alert: {#ALERT_DESC}'
                  opdata: '{#ALERT_SEVERITY}'
                  priority: HIGH
          master_item:
            key: oneview.get.alerts
          lld_macro_paths:
            -
              lld_macro: '{#ALERT_DESC}'
              path: $.description
            -
              lld_macro: '{#ALERT_ID}'
              path: $.id
            -
              lld_macro: '{#ALERT_SEVERITY}'
              path: $.severity
        -
          name: 'Enclosure discovery'
          type: DEPENDENT
          key: oneview.enclosures.discovery
          delay: '0'
          host_prototypes:
            -
              host: 'enclosure - {#ENCLOSURE_NAME}'
              name: 'enclosure - {#ENCLOSURE_NAME}'
              group_links:
                -
                  group:
                    name: 'Discovered hosts'
              templates:
                -
                  name: 'HPE OneView Enclosure'
              macros:
                -
                  macro: '{$ENCLOSURE_URI}'
                  value: '{#ENCLOSURE_URI}'
          master_item:
            key: oneview.get.enclosures
          lld_macro_paths:
            -
              lld_macro: '{#ENCLOSURE_NAME}'
              path: '$.["name"]'
            -
              lld_macro: '{#ENCLOSURE_URI}'
              path: '$.["uri"]'
            -
              lld_macro: '{#ENCLOSURE_UUID}'
              path: '$.["uuid"]'
        -
          name: 'Server discovery'
          type: DEPENDENT
          key: oneview.server.discovery
          delay: '0'
          host_prototypes:
            -
              host: '{#SERVER_MODEL} - {#SERVER_NAME}'
              name: '{#SERVER_MODEL} - {#SERVER_NAME}'
              group_links:
                -
                  group:
                    name: 'Discovered hosts'
              templates:
                -
                  name: 'HPE OneView Server'
              macros:
                -
                  macro: '{$SERVER_URI}'
                  value: '{#SERVER_URI}'
          master_item:
            key: oneview.get.servers
          lld_macro_paths:
            -
              lld_macro: '{#SERVER_MODEL}'
              path: '$.["model"]'
            -
              lld_macro: '{#SERVER_NAME}'
              path: '$.["name"]'
            -
              lld_macro: '{#SERVER_URI}'
              path: '$.["uri"]'
      macros:
        -
          macro: '{$ONEVIEW_HOST}'
        -
          macro: '{$ONEVIEW_PASS}'
        -
          macro: '{$ONEVIEW_USER}'
    -
      template: 'HPE OneView Enclosure'
      name: 'HPE OneView Enclosure'
      groups:
        -
          name: 'Templates/Server hardware'
      items:
        -
          name: 'OneView Enclosure: Power Interconnect Bays'
          type: DEPENDENT
          key: oneview.enclosure.interconnectbayspower
          delay: '0'
          units: W
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.interconnectBayWatts
          master_item:
            key: oneview.get.parts
        -
          name: 'OneView Enclosure: Power Fans and Management Devices'
          type: DEPENDENT
          key: oneview.enclosure.mgmtpower
          delay: '0'
          units: W
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.fansAndManagementDevicesWatts
          master_item:
            key: oneview.get.parts
        -
          name: 'OneView Enclosure: Power Allocated'
          type: DEPENDENT
          key: oneview.enclosure.powerallocated
          delay: '0'
          units: W
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.powerAllocatedWatts
          master_item:
            key: oneview.get.parts
        -
          name: 'OneView Enclosure: Power Available'
          type: DEPENDENT
          key: oneview.enclosure.poweravailable
          delay: '0'
          units: W
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.powerAvailableWatts
          master_item:
            key: oneview.get.parts
        -
          name: 'OneView Enclosure: Power Capacity'
          type: DEPENDENT
          key: oneview.enclosure.powercapacity
          delay: '0'
          units: W
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.powerCapacityWatts
          master_item:
            key: oneview.get.parts
        -
          name: 'OneView Enclosure: Serial Number'
          type: DEPENDENT
          key: oneview.enclosure.serialnumber
          delay: '0'
          trends: '0'
          value_type: CHAR
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.serialNumber
          master_item:
            key: oneview.get.parts
        -
          name: 'OneView Enclosure: Power Server Bays'
          type: DEPENDENT
          key: oneview.enclosure.serverbayspower
          delay: '0'
          units: W
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.deviceBayWatts
          master_item:
            key: oneview.get.parts
        -
          name: 'OneView Enclosure: Status'
          type: DEPENDENT
          key: oneview.enclosure.status
          delay: '0'
          trends: '0'
          value_type: CHAR
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.status
          master_item:
            key: oneview.get.parts
          triggers:
            -
              expression: '{last()}<>"OK"'
              name: 'Enclosure status problem'
              opdata: 'status: {ITEM.LASTVALUE1}'
              priority: HIGH
        -
          name: 'OneView Enclosure: Support State'
          type: DEPENDENT
          key: oneview.enclosure.supportstate
          delay: '0'
          trends: '0'
          value_type: CHAR
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.supportState
          master_item:
            key: oneview.get.parts
          triggers:
            -
              expression: '{last()}<>"Enabled"'
              name: 'Enclosure support state problem'
              opdata: 'support state: {ITEM.LASTVALUE1}'
              priority: WARNING
        -
          name: 'OneView Enclosure: Get Enclosure Parameters'
          type: SCRIPT
          key: oneview.get.parts
          history: '0'
          trends: '0'
          value_type: TEXT
          params: |
            try {
                var result = [],
                req = new CurlHttpRequest(),
                resp;
                req.AddHeader('content-type: application/json');
                req.AddHeader('x-api-version: 3000');
            
                //GET Token
                resp = req.Post('https://{$ONEVIEW_HOST}/rest/login-sessions',value);
                if (req.Status() != 200) {
                    throw 'Response code: '+req.Status();
                }
                resp = JSON.parse(resp);
                token = resp.sessionID;
            
                //GET Enclosure
                req.AddHeader('auth: '+token);
                resp = req.Get('https://{$ONEVIEW_HOST}/{$ENCLOSURE_URI}');
                if (req.Status() != 200) {
                    throw 'Response code: '+req.Status();
                }
                result = JSON.parse(resp);
            
                //DELETE token
                resp = req.Delete('https://{$ONEVIEW_HOST}/rest/login-sessions');
                if (req.Status() != 204) {
                    throw 'Response code: '+req.Status();
                }
             
            } catch (error) {
                Zabbix.Log(4, 'OneView api error: '+error);
                result = {
                    failed: error
                };
            }
            
            //RESULT
            return JSON.stringify(result);
          parameters:
            -
              name: password
              value: '{$ONEVIEW_PASS}'
            -
              name: userName
              value: '{$ONEVIEW_USER}'
      discovery_rules:
        -
          name: 'Enclosure appliance bays discovery'
          type: DEPENDENT
          key: enclosure.appliance.disovery
          delay: '0'
          item_prototypes:
            -
              name: 'OneView Enclosure: Appliance Bay{#ENCLOSURE_APPLIANCE_BAY} {#ENCLOSURE_APPLIANCE_MODEL} Power State'
              type: DEPENDENT
              key: 'appliance.bay.power.[{#ENCLOSURE_APPLIANCE_BAY}]'
              delay: '0'
              trends: '0'
              value_type: TEXT
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.applianceBays[?(@.bayNumber=="{#ENCLOSURE_APPLIANCE_BAY}")].poweredOn.first()'
              master_item:
                key: oneview.get.parts
            -
              name: 'OneView Enclosure: Appliance Bay{#ENCLOSURE_APPLIANCE_BAY} {#ENCLOSURE_APPLIANCE_MODEL} Presence'
              type: DEPENDENT
              key: 'appliance.bay.presence.[{#ENCLOSURE_APPLIANCE_BAY}]'
              delay: '0'
              trends: '0'
              value_type: TEXT
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.applianceBays[?(@.bayNumber=="{#ENCLOSURE_APPLIANCE_BAY}")].devicePresence.first()'
              master_item:
                key: oneview.get.parts
            -
              name: 'OneView Enclosure: Appliance Bay{#ENCLOSURE_APPLIANCE_BAY} {#ENCLOSURE_APPLIANCE_MODEL} Status'
              type: DEPENDENT
              key: 'appliance.bay.status.[{#ENCLOSURE_APPLIANCE_BAY}]'
              delay: '0'
              trends: '0'
              value_type: TEXT
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.applianceBays[?(@.bayNumber=="{#ENCLOSURE_APPLIANCE_BAY}")].status.first()'
              master_item:
                key: oneview.get.parts
          master_item:
            key: oneview.get.parts
          lld_macro_paths:
            -
              lld_macro: '{#ENCLOSURE_APPLIANCE_BAY}'
              path: $.bayNumber
            -
              lld_macro: '{#ENCLOSURE_APPLIANCE_MODEL}'
              path: $.model
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.applianceBays
        -
          name: 'Enclosure fan discovery'
          type: DEPENDENT
          key: enclosure.fan.disovery
          delay: '0'
          item_prototypes:
            -
              name: 'OneView Enclosure: FAN Bay{#ENCLOSURE_FAN_BAY} Presence'
              type: DEPENDENT
              key: 'fan.bay.presence.[{#ENCLOSURE_FAN_BAY}]'
              delay: '0'
              trends: '0'
              value_type: CHAR
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.fanBays[?(@.bayNumber=="{#ENCLOSURE_FAN_BAY}")].devicePresence.first()'
              master_item:
                key: oneview.get.parts
            -
              name: 'OneView Enclosure: FAN Bay{#ENCLOSURE_FAN_BAY} Status'
              type: DEPENDENT
              key: 'fan.bay.status.[{#ENCLOSURE_FAN_BAY}]'
              delay: '0'
              trends: '0'
              value_type: CHAR
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.fanBays[?(@.bayNumber=="{#ENCLOSURE_FAN_BAY}")].status.first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: oneview.get.parts
              trigger_prototypes:
                -
                  expression: '{last()}<>"OK"'
                  name: 'Enclosure FAN error in BAY{#ENCLOSURE_FAN_BAY}'
                  opdata: 'state: {ITEM.LASTVALUE1}'
                  priority: HIGH
          master_item:
            key: oneview.get.parts
          lld_macro_paths:
            -
              lld_macro: '{#ENCLOSURE_FAN_BAY}'
              path: $.bayNumber
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.fanBays
        -
          name: 'Enclosure manager bays discovery'
          type: DEPENDENT
          key: enclosure.manager.disovery
          delay: '0'
          item_prototypes:
            -
              name: 'OneView Enclosure: Manager Bay{#ENCLOSURE_MANAGER_BAY} {#ENCLOSURE_MANAGER_MODEL} Link State'
              type: DEPENDENT
              key: 'manager.bay.linkstate.[{#ENCLOSURE_MANAGER_BAY}]'
              delay: '0'
              trends: '0'
              value_type: TEXT
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.managerBays[?(@.bayNumber=="{#ENCLOSURE_MANAGER_BAY}")].linkPortState.first()'
              master_item:
                key: oneview.get.parts
            -
              name: 'OneView Enclosure: Manager Bay{#ENCLOSURE_MANAGER_BAY} {#ENCLOSURE_MANAGER_MODEL} Status'
              type: DEPENDENT
              key: 'manager.bay.status.[{#ENCLOSURE_MANAGER_BAY}]'
              delay: '0'
              trends: '0'
              value_type: CHAR
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.managerBays[?(@.bayNumber=="{#ENCLOSURE_MANAGER_BAY}")].status.first()'
              master_item:
                key: oneview.get.parts
          master_item:
            key: oneview.get.parts
          lld_macro_paths:
            -
              lld_macro: '{#ENCLOSURE_MANAGER_BAY}'
              path: $.bayNumber
            -
              lld_macro: '{#ENCLOSURE_MANAGER_MODEL}'
              path: $.model
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.managerBays
        -
          name: 'Enclosure PSU discovery'
          type: DEPENDENT
          key: enclosure.psu.disovery
          delay: '0'
          item_prototypes:
            -
              name: 'OneView Enclosure: PSU Bay{#ENCLOSURE_PSU_BAY} Presence'
              type: DEPENDENT
              key: 'psu.bay.presence.[{#ENCLOSURE_PSU_BAY}]'
              delay: '0'
              trends: '0'
              value_type: TEXT
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.powerSupplyBays[?(@.bayNumber=="{#ENCLOSURE_PSU_BAY}")].devicePresence.first()'
              master_item:
                key: oneview.get.parts
            -
              name: 'OneView Enclosure: PSU Bay{#ENCLOSURE_PSU_BAY} Status'
              type: DEPENDENT
              key: 'psu.bay.status.[{#ENCLOSURE_PSU_BAY}]'
              delay: '0'
              trends: '0'
              value_type: CHAR
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.powerSupplyBays[?(@.bayNumber=="{#ENCLOSURE_PSU_BAY}")].status.first()'
              master_item:
                key: oneview.get.parts
              trigger_prototypes:
                -
                  expression: '{last()}<>"OK"'
                  name: 'Encloure PSU error in BAY{#ENCLOSURE_PSU_BAY}'
                  opdata: 'state: {ITEM.LASTVALUE1}'
                  priority: HIGH
          master_item:
            key: oneview.get.parts
          lld_macro_paths:
            -
              lld_macro: '{#ENCLOSURE_PSU_BAY}'
              path: $.bayNumber
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.powerSupplyBays
    -
      template: 'HPE OneView Server'
      name: 'HPE OneView Server'
      groups:
        -
          name: 'Templates/Server hardware'
      items:
        -
          name: 'OneView Server: Get Server Parameteres'
          type: SCRIPT
          key: oneview.get.server.parameters
          history: '0'
          trends: '0'
          value_type: TEXT
          params: |
            try {
                var result = [],
                req = new CurlHttpRequest(),
                resp;
                req.AddHeader('content-type: application/json');
                req.AddHeader('x-api-version: 3000');
            
                //GET Token
                resp = req.Post('https://{$ONEVIEW_HOST}/rest/login-sessions',value);
                if (req.Status() != 200) {
                    throw 'Response code: '+req.Status();
                }
                resp = JSON.parse(resp);
                token = resp.sessionID;
            
                //GET Server
                req.AddHeader('auth: '+token);
                resp = req.Get('https://{$ONEVIEW_HOST}/{$SERVER_URI}');
                if (req.Status() != 200) {
                    throw 'Response code: '+req.Status();
                }
                result = JSON.parse(resp);
            
                //DELETE token
                resp = req.Delete('https://{$ONEVIEW_HOST}/rest/login-sessions');
                if (req.Status() != 204) {
                    throw 'Response code: '+req.Status();
                }
             
            } catch (error) {
                Zabbix.Log(4, 'OneView api error: '+error);
                result = {
                    failed: error
                };
            }
            
            //RESULT
            return JSON.stringify(result);
          parameters:
            -
              name: password
              value: '{$ONEVIEW_PASS}'
            -
              name: userName
              value: '{$ONEVIEW_USER}'
        -
          name: 'OneView Server: ILO state'
          type: DEPENDENT
          key: oneview.server.ilostate
          delay: '0'
          trends: '0'
          value_type: CHAR
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.mpState
          master_item:
            key: oneview.get.server.parameters
          triggers:
            -
              expression: '{last()}<>"OK"'
              name: 'Server management processor state problem'
              opdata: 'ILO state: {ITEM.LASTVALUE1}'
              priority: HIGH
        -
          name: 'OneView Server: Operating System'
          type: DEPENDENT
          key: oneview.server.operatingsystem
          delay: '0'
          trends: '0'
          value_type: TEXT
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.operatingSystem
          master_item:
            key: oneview.get.server.parameters
        -
          name: 'OneView Server: Position'
          type: DEPENDENT
          key: oneview.server.position
          delay: '0'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.position
          master_item:
            key: oneview.get.server.parameters
        -
          name: 'OneView Server: Power State'
          type: DEPENDENT
          key: oneview.server.powerstate
          delay: '0'
          trends: '0'
          value_type: CHAR
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.powerState
          master_item:
            key: oneview.get.server.parameters
          triggers:
            -
              expression: '{last()}="Off"'
              name: 'Server is powered off'
              opdata: 'power state: {ITEM.LASTVALUE1}'
              priority: INFO
        -
          name: 'OneView Server: Serial Number'
          type: DEPENDENT
          key: oneview.server.serialnumber
          delay: '0'
          trends: '0'
          value_type: CHAR
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.serialNumber
          master_item:
            key: oneview.get.server.parameters
        -
          name: 'OneView Server: server name'
          type: DEPENDENT
          key: oneview.server.servername
          delay: '0'
          trends: '0'
          value_type: TEXT
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.serverName
          master_item:
            key: oneview.get.server.parameters
        -
          name: 'OneView Server: Status'
          type: DEPENDENT
          key: oneview.server.status
          delay: '0'
          trends: '0'
          value_type: CHAR
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.status
          master_item:
            key: oneview.get.server.parameters
          triggers:
            -
              expression: '{last()}<>"OK"'
              name: 'Server status problem'
              opdata: 'status: {ITEM.LASTVALUE1}'
              priority: HIGH
        -
          name: 'OneView Server: Support State'
          type: DEPENDENT
          key: oneview.server.supportstate
          delay: '0'
          trends: '0'
          value_type: CHAR
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.supportState
          master_item:
            key: oneview.get.server.parameters
          triggers:
            -
              expression: '{last()}<>"Enabled"'
              name: 'Server support state problem'
              opdata: 'support state: {ITEM.LASTVALUE1}'
              priority: WARNING
